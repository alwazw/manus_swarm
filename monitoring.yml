# Monitoring & Observability Stack
# Prometheus-based monitoring ecosystem

services:
  # =============================================================================
  # PROMETHEUS - Metrics Collection & Storage
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME}'
      - '--storage.tsdb.retention.size=${PROMETHEUS_RETENTION_SIZE}'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_config:/etc/prometheus
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - monitoring_network
      - proxy_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_SUBDOMAIN}.${PRIMARY_DOMAIN}`) || Host(`${PROMETHEUS_SUBDOMAIN}.${SECONDARY_DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=${CERT_RESOLVER}"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # =============================================================================
  # GRAFANA - Visualization & Dashboards
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=${GRAFANA_INSTALL_PLUGINS}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_SUBDOMAIN}.${PRIMARY_DOMAIN}
      - GF_SERVER_DOMAIN=${GRAFANA_SUBDOMAIN}.${PRIMARY_DOMAIN}
      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GENERIC_OAUTH_NAME=Authentik
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=${AUTHENTIK_SECRET_KEY}
      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=https://${PRIMARY_DOMAIN}/login/application/o/authorize/
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=https://${PRIMARY_DOMAIN}/login/application/o/token/
      - GF_AUTH_GENERIC_OAUTH_API_URL=https://${PRIMARY_DOMAIN}/login/application/o/userinfo/
      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=true
      - GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - monitoring_network
      - proxy_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_SUBDOMAIN}.${PRIMARY_DOMAIN}`) || Host(`${GRAFANA_SUBDOMAIN}.${SECONDARY_DOMAIN}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=${CERT_RESOLVER}"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # =============================================================================
  # CADVISOR - Container Metrics
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'
    networks:
      - monitoring_network

  # =============================================================================
  # NODE EXPORTER - Host Metrics
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring_network

  # =============================================================================
  # BLACKBOX EXPORTER - Endpoint Monitoring
  # =============================================================================
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox-exporter
    restart: unless-stopped
    volumes:
      - ./config/blackbox/blackbox.yml:/config/blackbox.yml:ro
    command:
      - '--config.file=/config/blackbox.yml'
    networks:
      - monitoring_network

  # =============================================================================
  # ALERTMANAGER - Alert Routing & Management
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.${PRIMARY_DOMAIN}'
    volumes:
      - alertmanager_data:/alertmanager
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - monitoring_network
      - proxy_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alerts.${PRIMARY_DOMAIN}`) || Host(`alerts.${SECONDARY_DOMAIN}`)"
      - "traefik.http.routers.alertmanager.tls=true"
      - "traefik.http.routers.alertmanager.tls.certresolver=${CERT_RESOLVER}"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

  # =============================================================================
  # PUSHGATEWAY - Batch Job Metrics
  # =============================================================================
  pushgateway:
    image: prom/pushgateway:latest
    container_name: pushgateway
    restart: unless-stopped
    networks:
      - monitoring_network

  # =============================================================================
  # POSTGRES EXPORTER - Database Metrics
  # =============================================================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - monitoring_network
      - database_network

  # =============================================================================
  # REDIS EXPORTER - Redis Metrics
  # =============================================================================
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - monitoring_network
      - database_network

  # =============================================================================
  # NGINX EXPORTER - Web Server Metrics
  # =============================================================================
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://traefik:8080/metrics'
    networks:
      - monitoring_network
      - proxy_network

  # =============================================================================
  # DOCKER SOCKET PROXY - Secure Docker API Access
  # =============================================================================
  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: docker-socket-proxy
    restart: unless-stopped
    environment:
      - CONTAINERS=1
      - SERVICES=1
      - TASKS=1
      - NETWORKS=1
      - NODES=1
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=0
      - INFO=1
      - PLUGINS=0
      - POST=0
      - SECRETS=0
      - SESSION=0
      - SWARM=1
      - SYSTEM=1
      - VERSION=1
      - VOLUMES=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring_network

  # =============================================================================
  # UPTIME KUMA - Service Uptime Monitoring
  # =============================================================================
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    volumes:
      - uptime_kuma_data:/app/data
    networks:
      - monitoring_network
      - proxy_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(`uptime.${PRIMARY_DOMAIN}`) || Host(`uptime.${SECONDARY_DOMAIN}`)"
      - "traefik.http.routers.uptime.tls=true"
      - "traefik.http.routers.uptime.tls.certresolver=${CERT_RESOLVER}"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  monitoring_network:
    driver: bridge
    internal: false
  proxy_network:
    external: true
  database_network:
    external: true

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  prometheus_config:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  uptime_kuma_data:

